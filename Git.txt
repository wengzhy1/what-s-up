Git

1、安装
	git config --global user.name "Your Name"	#绑定用户名
	git config --global user.email "email@example.com"	#绑定邮箱

2、创建
	git init	#初始化Git仓库
	git add <file>	#添加文件到Git仓库，把文件修改添加到暂存区
	git commit -m "remarks"	#提交变更后内容到Git仓库，-m参数后面输入说明

3、版本 本地仓库
	git status	#查看仓库当前的状态，有哪些文件修改、待提交
	git diff	#查看具体修改内容，difference
	git log		#查看提交日志 --pretty=online参数输出一行
	git reset --hard HEAD^	#版本回退到上一个版本，上上一个版本HEAD^^，往上100个版本HEAD~100
	git reset --hard commit_id	#根据版本ID恢复指定版本
	git reflog	#查看历史命令，以便确定要回到未来的哪个版本
	git diff HEAD -- <file>	#查看工作区和版本库里面最新版本的区别
	git checkout -- <file>	#丢弃工作区的修改，或误删文件恢复到最新版本，一键还原(版本库替换工作区的版本)
	git reset HEAD <file>	#把暂存区的修改撤销掉，重新放回工作区
	git rm <file>	#从版本库中删除文件，后执行 git commit -m "remarks"

4、版本 远程仓库GitHub
	ssh-keygen -t -tsa -C "youremail@example.com"	#创建SSH Key
	git remote add origin git@server-name:path/repo-name.git 	#远程库关联本地仓库
	git push -u origin master	#第一次本地库的所有内容推送到远程库上，-u参数首次关联
	git push origin master		#本地提交后，推送到远程库
	git clone git@server-name:path/repo-name.git 	#克隆一个本地库，默认的git://使用ssh，但也可以使用https等其他协议

5、分支
	git checkout -b <name>		#创建dev分支并切换到分支，-b参数表示创建并切换，相当于以下两条命令：
	git branch <name>		#创建
	git checkout <name>		#切换
	git branch		#查看当前所有分支，当前分支前面会标一个*号
	git merge <name>	#把分支合并到当前分支
	git branch -d <name>	#合并后删除分支
	git branch -D <name>	#合并前删除分支，强行
	git log --graph --pretty=oneline --abbrev-commit	#查看分支合并图
	git merge --no-ff -m "merge with no-ff" <name>		#--no-ff参数，表示禁用Fast forward
	git stash	#储藏当前工作现场
	git stash list	#查看工作现场存在哪里
	git stash apply	stash@{0}	#恢复工作现场，stash内容仍存在
	git stash drop stash@{0}	#删除stash内容
	git stash pop	#恢复工作现场，同时删除stash内容
	git remote		#查看远程库的信息
	git remote -v	#显示更详细的信息
	git push origin <branch-name>	#推送本地分支到远程库
	git checkout -b <branch-name> origin/<branch-name>	#创建远程origin的某分支到本地，并创建本地分支
	git pull 	#把最新的提交从远程分支抓下来
	git branch --set-upstream <branch-name> origin/<branch-name>	#指定本地分支与远程origin/分支的连接

6、标签
	git tag <tag-name>	#切换到分支后，打一个新标签
	git tag 	#查看当前分支所有标签
	git log --pretty=oneline --abbrev-commit	#找到历史提交的commit-id
	git tag <tag-name> <commit-id>	
	git show <tagname>	#查看标签信息
	git tag -a <tag-name> -m "remarks" <commit-id>	#-a指定标签名，-m指定说明文字，-s用私钥签名一个标签
	git tag -d <tag-name>	#从本地删除
	git push origin :refs/tags/<tag-name>	#从远程删除
	git push origin <tagname>	#推送某个标签到远程
	git push origin --tags		#一次性推送全部尚未推送到远程的本地标签

7、其它
	git config --global color.ui true	#显示颜色
	git add -f <file>	#-f强制添加
	git check-ignore -v <file>	#.gitignore文件中哪条规则忽略了该文件，.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
	git config --global alias.st status		#取别名，st就表示status，--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用
	git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"	#示例

8、搭建私有仓库
	sudo apt-get install git 	#安装git
	sudo adduser git 			#创建一个git用户，用来运行git服务
	收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
	sudo git init --bare sample.git 	#选定一个目录作为Git仓库，Git就会创建一个裸仓库，裸仓库没有工作区
	sudo chown -R git:git sample.git 	#把owner改为git
	编辑/etc/passwd git:x:1001:1001:,,,:/home/git:/bin/bash --> git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
	Gitosis来管理公钥
	Gitolite来管理权限
